:next_link: 01_values
:load_files: ["code/intro.js"]

= Introducción =

Este es un libro sobre como hacer que los ((ordenadores)) hagan lo que quieres que hagan. Hoy en día, los ordenadores son tan comunes como los destornilladores, solo que contienen mucha complejidad oculta, lo que hace mas difícil trabajar con ellos y entenderlos. Para muchos, son como alienigenas, ligeramente intimidades.

image::img/generated/computer.png[alt="Communicating with a computer"]

(((graphical user interface)))Hemos encontrado dos maneras efectivas de salvar el hueco de comunicación entre nosotros, squishy organismos biológicos, y los ordenadores, manipuladores de información sin sentimientos. La primera es apelar a nuestro sentido del mundo físico y a partir de ahi, construir interfaces que mimeticen ese mundo, permitiéndonos manipular formas en una pantalla con nuestros dedos. Esto resulta funcionar muy bien para interacciones casuales con ordenadores.

(((programming language)))Sin embargo, aun no hemos encontrado una buena manera de usar este enfoque de “point-and-click” para comunicarle cosas al ordenador que el diseñador de la interfaz no haya anticipado. Para open-ended interfaces, como darles instrucciones al ordenador para realizar tareas arbitrarias, hemos tenido algo mas de suerte con un enfoque que hace uso de nuestro talento para el lenguaje: enseñar al ordenador un lenguaje.

(((human language)))(((expressivity)))Los lenguajes humanos permiten combinar palabras y frases de multiples maneras, permitiendo decir diferentes cosas. Los lenguajes de los ordenadores, aunque gramaticalmente son menos flexibles, siguen un principio similar.

(((JavaScript,availability of)))(((casual computing)))El uso cotidiano de los ordenadores, se ha incrementado potencialmente en los últimos 20 años, y las interfaces basadas en código, que antiguamente eran la principal manera de interactuar con los ordenadores, han sido reemplazadas en su mayoría por interfaces gráficos. Pero aun están ahi, si sabes donde mirar. Uno de estos lenguajes, JavaScript, se encuentra integrado hoy en día en casi cualquier ((navegador)) y, por consiguiente, en casi cualquier dispositivo.

indexsee:[web browser,browser]La intención de este libro es familiarizarte lo suficiente con este lenguaje de programación como para que seas capaz de hacer que el ordenador haga lo que tu quieras que haga.

== On programming ==

[quote, Confucius]
____
(((Confucius)))I do not enlighten those who are not eager to learn,
nor arouse those who are not anxious to give an explanation
themselves. If I have presented one corner of the square and they
cannot come back to me with the other three, I should not go over the
points again.
____

(((programming,difficulty of)))Ademas de explicar JavaScript, este libro también introduce principios básicos de programación. Resulta que programar es duro. Las reglas fundamentales son por lo general simples y claras. Pero los programas, construidos sobre estas reglas básicas, tienden a complicarse lo suficiente como para tener sus propias reglas y complejidad. En cierto modo, estas construyendo tu propio laberinto, y podrías perderte en el si te descuidas.

(((learning)))Habrá momentos en los que seguir este libro sera tremendamente frustrante. Si eres nuevo en la programación, te encontrarás con mucho material nuevo que digerir. Gran parte de este material se entremezclará de forma que tendrás que ser tu el que haga conexiones entre los diferentes conceptos con el fin de comprenderlo todo.

Es cosa tuya hacer el esfuerzo necesario. Cuando tengas problemas para seguir el libro, no saltes directamente a conclusiones precipitadas sobre tus propias aptitudes. Vas por buen camino — solo tienes que insistir. Haz un descanso, relee cosas, y siempre te claro que has entendido bien los programas ejemplo y los ejercicios antes de continuar. Aprender es un trabajo duro, pero todo lo que aprendas sumara y para mas fácil aprender lo siguiente.

[quote, Joseph Weizenbaum, Computer Power and Human Reason]
____
(((Weizenbaum+++,+++ Joseph)))El programador informatico es un creador de universos de los cuales el es el único responsable. Universos de complejidad virtual ilimitada pueden ser creados en forma de programas informáticos.
____

(((program,nature of)))(((data)))Un programa es muchas cosas. Es un trozo de texto escrito por un programador, es la fuerza directriz que hace al ordenador hacer lo que hace, es información en la memoria del ordenador, al mismo tiempo que controla las acciones realizadas en este mismo espacio en la memoria. Por lo general, las analogías que comparan programas con objetos físicos con los que estamos familiarizados suelen quedarse un poco cortas. Una que se aproxima de manera algo superficial, seria aquella que compara el programa con una maquina, donde las distintas piezas que la componen, interconectadas entre si, contribuyen a realizar juntas la función para la que la maquina ha sido creada.

(((computer)))Siguiendo con esta analogía, un ordenador es una maquina construida para albergar estas maquinas inmateriales. Por si mismo, los ordenadores solo pueden realizar tareas tremendamente básicas. La razón por la que resultan tan útiles, es por que son capaces de realizar estas simples tareas a una velocidad increíblemente rápida. Un programa es capaz de combinar ingeniosamente una enorme cantidad de estas acciones simples con el fin de poder realizar tareas mas complejas.

(((programming,joy of)))To some of us, writing computer programs is a
fascinating game. A program is a building of thought. It is costless
to build, it is weightless, and it grows easily under our typing
hands.

Para algunos de nosotros, programar es un juego fascinante. Un programa es una obra de pensamiento. No cuesta nada construirlo, no pesa y tienen la capacidad de crecer rápidamente bajo nuestros dedos mientras tecleamos.
Sin embargo, si no se tiene cuidado, su tama;o y complejidad se pueden descontrolar si no se tiene cuidado, confundiendo incluso a su creador. Mantener los programas bajo control es el principal problema de la programación. Cuando un programa funciona, es algo bello. El arte de programar es el arte de controlar la complejidad. El buen programa es sutil — simple en su complejidad.

(((programming style)))(((best practices)))Muchos programadores creen que esta complejidad se maneja mejor usando unicamente un reducido grupo de tecnicas bien conocidas. Han compuesto una serie de reglas estrictas ("Mejores habitos"), predefiniendo la forma que los programas deben tener. Los mas entusiastas de esta estas reglas, incluso llegan a considerar a aquellos que no siguen estas normas como malos programadores.

(((experiment)))(((learning)))What hostility to the richness of
programming—to try to reduce it to something straightforward and
predictable, to place a taboo on all the weird and beautiful programs!
The landscape of programming techniques is enormous, fascinating in
its diversity, and still largely unexplored. It is certainly dangerous
going, luring the inexperienced programmer into all kinds of
confusion, but that only means you should proceed with caution and
keep your wits about you. As you learn there will always be new
challenges and new territory to explore. Programmers who refuse to
keep exploring will stagnate, forget their joy, and get bored with
their craft.

== Porque el lenguaje importa ==

(((programming language)))(((machine code)))(((binary data)))En los comienzos, cuando la informatica acababa de nacer, no existian los lenguajes de programacion. Un programa tipico tenia esta pinta:

----
00110001 00000000 00000000
00110001 00000001 00000001
00110011 00000001 00000010
01010001 00001011 00000010
00100010 00000010 00001000
01000011 00000001 00000000
01000001 00000001 00000001
00010000 00000010 00000000
01100010 00000000 00000000
----

(((programming,history of)))(((punch card)))(((complexity))) Esto seria un programa que suma los numeros del 1 al 10 y los imprime en pantalla, mostrando: `1 + 2 + ... + 10 = 55`. Este programa se podia ejecutar en un hipotetico basico ordenador. Para programar en los ordenadores de antes, era necesario crear grandes series de interruptores en la posicion adecuada o perforar cartulinas con un determinado patron de agujeros que era leido por el ordenador en cuestion. Con esto te puedes hacer una idea de lo tedioso que resultaba todo y la cantidad de prueba-error que requeria. Incluso escribir los programas mas simples, requerian de un gran ingenio y disciplina. Los programas mas complejos eran practicamente inconcebibles.

(((bit)))(((wizard (mighty))))Por supuesto, el introducir estos arcanos patrones de bits (Unos y ceros) le daba al programador una profunda sensacion de poderoso mago, y esto tiene que contar algo en terminos de satisfacción laboral.

(((memory)))(((instruction)))Cada linea del programa anterior, contiene una unica instruccion. Escrito en español, quedaria algo asi:

[source,text/plain]
----
1. Almacena el numero 0 en la posicion 0 de la memoria.
2. Almacena el numero 1 en la posicion 1 de la memoria
3. Almacena el valor de la posicion 1 de la memoria en la posicion 2 de la memoria.
4. Resta 11 al valor de la posicion 2 de la memoria.
5. Si el valor de la posicion 2 de la memoria es el numero 0, continua con la instrucción 9.
6. Añade el valor de la posicion 1 de la memoria a la posicion 0 de la memoria.
7. Añade el numero 1 al valor de la posicion 1 de la memoria.
8. Continua con la instrucción 3.
9. Muestra el valor de la posicion 0 de la memoria.
----

(((readability)))(((naming)))(((variable)))A pesar de que esto se puede leer mas facilmente que la sopa de unos y ceros de antes, sigue siendo incomodo de seguir. Usar nombres en lugar de numeros podria ayudar con las instrucciones y las posiciones en la memoria.

[source,text/plain]
----
 Asigna "total" a 0.
 Asigna "cuenta" a 1.
 [loop]
 Asigna "comparar" a "cuenta".
 Resta 11 a "comparar".
 Si "comparar" es igual a 0, continua en [fin].
 Añade "cuenta" a "total".
 Añade 1 a "cuenta".
 Continua en [loop].
 [fin]
 Muestra “total”.
----

(((loop)))(((jump)))(((summing example)))Can you see how the program
works at this point? The first two lines give
two memory locations their starting values: `total` will be used to
build up the result of the computation, and `count` will keep track of the
number that we are currently looking at. The lines using `compare` are
probably the weirdest ones. The program wants to see
whether `count` is equal to 11 in order to decide whether it can stop
running. Because our hypothetical machine is rather primitive, it can only
test whether a number is zero and make a decision (or jump) based on
that. So it uses the memory location labeled `compare` to compute the
value of `count - 11` and makes a decision based on that value. The
next two lines add the value of `count` to the result and increment
`count` by 1 every time the program has decided that `count` is not 11 yet.

Here is the same program in JavaScript:

[source,javascript]
----
var total = 0, count = 1;
while (count <= 10) {
  total += count;
  count += 1;
}
console.log(total);
// → 55
----

(((while loop)))(((loop)))This version gives us a few more improvements.
Most importantly, there is no need to specify the way we want the
program to jump back and forth anymore. The `while` language
construct takes care of that. It continues executing the block
(wrapped in braces) below it as long as the condition it was given
holds. That condition is `count <= 10`, which means “++count++ is less than or equal to
10”. We no longer have to create a temporary value and compare that
to zero, which was an uninteresting detail. Part of the power of
programming languages is that they take care of uninteresting details
for us.

(((console.log)))At the end of the program, after the `while` construct has
finished, the `console.log` operation is applied to the result in
order to write it as output.

(((sum function)))(((range
function)))(((abstraction)))(((function)))Finally, here is what the
program could look like if we happened to have the convenient
operations `range` and `sum` available, which respectively create a
((collection)) of numbers within a range and compute the sum of a
collection of numbers:

// start_code

[source,javascript]
----
console.log(sum(range(1, 10)));
// → 55
----

(((readability)))The moral of this story is that the same program can
be expressed in long and short, unreadable and readable ways. The
first version of the program was extremely obscure, whereas this last
one is almost English: `log` the `sum` of the `range` of numbers from
1 to 10. (We will see in link:04_data.html#data[later chapters] how to
build operations like `sum` and `range`.)

(((programming language,power of)))(((composability)))A good
programming language helps the programmer by allowing them to talk
about the actions that the computer has to perform on a higher level.
It helps omit uninteresting details, provides convenient building
blocks (such as `while` and `console.log`), allows you to define your
own building blocks (such as `sum` and `range`), and makes those blocks
easy to compose.

== What is JavaScript? ==

indexsee:[WWW,World Wide Web] indexsee:[Web,World Wide Web](((history)))(((Netscape)))(((browser)))(((web
application)))(((JavaScript)))(((JavaScript,history of)))(((World Wide
Web))) JavaScript was introduced in 1995 as a way to add programs to
web pages in the Netscape Navigator browser. The language has since
been adopted by all other major graphical web browsers. It has made modern
web applications possible—applications with which you can interact
directly, without doing a page reload for every action. But it is also used in more
traditional websites to provide various forms of interactivity and
cleverness.

(((Java)))(((naming)))It is important to note that JavaScript has
almost nothing to do with the programming language named Java. The
similar name was inspired by marketing considerations, rather than
good judgment. When JavaScript was being introduced, the Java language
was being heavily marketed and was gaining popularity. Someone
thought it was a good idea to try to ride along on this success. Now we
are stuck with the name.

(((ECMAScript)))(((compatibility)))After its adoption outside of
Netscape, a ((standard)) document was written to describe the way the
JavaScript language should work to make sure the various pieces of
software that claimed to support JavaScript were actually talking
about the same language. This is called the ECMAScript standard, after
the Ecma International organization that did the standardization. In
practice, the terms ECMAScript and JavaScript can be used interchangeably—they
are two names for the same language.

(((JavaScript,weaknesses of)))(((debugging)))There are those who will
say _terrible_ things about the JavaScript language. Many of these
things are true. When I was required to write something in JavaScript
for the first time, I quickly came to despise it. It would accept
almost anything I typed but interpret it in a way that was completely
different from what I meant. This had a lot to do with the fact that I
did not have a clue what I was doing, of course, but there is a real
issue here: JavaScript is ridiculously liberal in what it allows. The
idea behind this design was that it would make programming in
JavaScript easier for beginners. In actuality, it mostly makes finding
problems in your programs harder because the system will not point
them out to you.

(((JavaScript,flexibility of)))(((flexibility)))This flexibility also
has its advantages, though. It leaves space for a lot of techniques
that are impossible in more rigid languages, and as you will see (for
example in link:10_modules.html#modules[Chapter 10]) it
can be used to overcome some of JavaScript's shortcomings. After
((learning)) the language properly and working with it for a while, I have
learned to actually _like_ JavaScript.

(((future)))(((JavaScript,versions of)))(((ECMAScript)))(((ECMAScript
6)))There have been several versions of JavaScript. ECMAScript
version 3 was the widely supported version in the time of
JavaScript's ascent to dominance, roughly between 2000 and 2010.
During this time, work was underway on an ambitious version 4, which
planned a number of radical improvements and extensions to the
language. Changing a living, widely used language in such a radical
way turned out to be politically difficult, and work on the version 4
was abandoned in 2008, leading to the much less ambitious version 5
coming out in 2009. We're now at the point where all major
browsers support version 5, which is the language version that
this book will be focusing on. A version 6 is in the process of
being finalized, and some browsers are starting to support new
features from this version.

(((JavaScript,uses of)))Web browsers are not the only platforms on
which JavaScript is used. Some databases, such as MongoDB and CouchDB,
use JavaScript as their scripting and query language. Several
platforms for desktop and server programming, most notably the
((Node.js)) project (the subject of link:20_node.html#node[Chapter
20]) are providing a powerful environment for programming JavaScript
outside of the browser.

== Code, and what to do with it ==

(((reading code)))(((writing code)))Code is the text that makes up
programs. Most chapters in this book contain quite a lot of it. In my
experience, reading code and writing ((code)) are indispensable parts of
((learning)) to program, so try to not just glance over the examples. Read
them attentively and understand them. This may be slow and confusing
at first, but I promise that you will quickly get the hang of it. The
same goes for the ((exercises)). Don't assume you understand them
until you've actually written a working solution.

(((interpretation)))I recommend you try your solutions to exercises
in an actual JavaScript interpreter. That way, you'll get immediate feedback on
whether what you are doing is working, and, I hope, you'll be
tempted to ((experiment)) and go beyond the exercises.

ifdef::interactive_target[]

When reading this book in your browser, you can edit (and run) all
example programs by clicking them.

endif::interactive_target[]

ifdef::book_target[]

(((download)))(((sandbox)))(((running code)))The easiest way to run
the example code in the book, and to experiment with it, is to look it
up in the online version of the book at
http://eloquentjavascript.net/[_eloquentjavascript.net_]. There, you
can click any code example to edit and run it and to see the
output it produces. To work on the exercises, go to
http://eloquentjavascript.net/code[_eloquentjavascript.net/code_],
which provides starting code for each coding exercise and allows you
to look at the solutions.

endif::book_target[]

(((developer tools)))(((JavaScript console)))If you want to run the
programs defined in this book outside of the book's sandbox, some care
is required. Many examples stand on their own and should work in any
JavaScript environment. But code in later chapters is mostly written
for a specific environment (the browser or Node.js) and can run only
there. In addition, many chapters define bigger programs, and the
pieces of code that appear in them depend on each other or on external
files. The http://eloquentjavascript.net/code[sandbox] on the website
provides links to Zip files containing all of the scripts and data
files necessary to run the code for a given chapter.

== Overview of this book ==

This book contains roughly three parts. The first 11 chapters discuss
the JavaScript language itself. The next eight chapters are about web
((browsers)) and the way JavaScript is used to program them. Finally,
two chapters are devoted to ((Node.js)), another environment to program
JavaScript in.

Throughout the book, there are five _project chapters_, which describe
larger example programs to give you a taste of real programming. In
order of appearance, we will work through building an
link:07_elife.html#elife[artificial life simulation], a
link:11_language.html#language[programming language], a
link:15_game.html#game[platform game], a
link:19_paint.html#paint[paint program], and a
link:21_skillsharing.html#skillsharing[dynamic website].

The language part of the book starts with four chapters to introduce
the basic structure of the JavaScript language. They introduce
link:02_program_structure.html#program_structure[control structures]
(such as the `while` word you saw in this introduction),
link:03_functions.html#functions[functions] (writing your own
operations), and link:04_data.html#data[data structures]. After these,
you will be able to write simple programs. Next, Chapters
link:05_higher_order.html#higher_order[5] and
link:06_object.html#object[6] introduce techniques to use functions
and objects to write more _abstract_ code and thus keep complexity
under control.

After a link:07_elife.html#elife[first project chapter], the first
part of the book continues with chapters on
link:08_error.html#error[error handling and fixing], on
link:09_regexp.html#regexp[regular expressions] (an important tool for
working with text data), and on
link:10_modules.html#modules[modularity]—another weapon against
complexity. The link:11_language.html#language[second project chapter]
concludes the first part of the book.

The second part, Chapters link:12_browser.html#browser[12] to
link:19_paint.html#paint[19], describes the tools that browser
JavaScript has access to. You'll learn to display things on the screen
(Chapters link:13_dom.html#dom[13] and
link:16_canvas.html#canvas[16]), respond to user input (Chapters
link:14_event.html#event[14] and link:18_forms.html#forms[18]), and
communicate over the network (link:17_http.html#http[Chapter 17]).
There are again two project chapters in this part.

After that, link:20_node.html#node[Chapter 20] describes Node.js, and
link:21_skillsharing.html#skillsharing[Chapter 21] builds a simple web
system using that tool.

ifdef::commercial_target[]

Finally, link:22_fast.html#fast[Chapter 22] describes some of the
considerations that come up when optimizing JavaScript programs for
speed.

endif::commercial_target[]

== Typographic conventions ==

(((factorial function)))In this book, text written in a `monospaced`
font will represent elements of programs—sometimes
they are self-sufficient fragments, and sometimes they just refer to
part of a nearby program. Programs (of which you have already seen a
few), are written as follows:

[source,javascript]
----
function fac(n) {
  if (n == 0)
    return 1;
  else
    return fac(n - 1) * n;
}
----

(((console.log)))Sometimes, in order to show the output that a program
produces, the expected output is written after it, with two slashes
and an arrow in front.

[source,javascript]
----
console.log(fac(8));
// → 40320
----

Good luck!
